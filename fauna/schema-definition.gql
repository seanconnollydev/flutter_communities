type Mutation {
  createPost(input: CreatePostInput!): Post! @resolver(name: "create_post")
  createPostVote(input: CreatePostVoteInput!): Post! @resolver(name: "create_post_vote")
  createUser(input: CreateUserInput!): String! @resolver(name: "create_user")
  loginUser(input: LoginUserInput!): String! @resolver(name: "login_user")
}

type Query {
  communities: [Community!]!
  getPostsByCommunityId(id: ID!): [Post]! @resolver(name: "get_posts_by_community_id", paginated: true)
  throwsError: Community! @resolver(name: "throws_error")
}

type User {
  username: String! @unique
  communities: [Community!] @relation(name: "user_communities")
  posts: [Post!] @relation(name: "user_posts")
  votes: [PostVote!] @relation(name: "user_post_votes")
}

input CreatePostInput {
  title: String!
  message: String!
  communityId: String!
}

input CreateUserInput {
  username: String!
  password: String!
}

input LoginUserInput {
  username: String!
  password: String!
}

input CreatePostVoteInput {
  postId: ID!
  type: PostVoteType!
}

type Community {
  name: String!
  purpose: String
  creator: User! @relation(name: "user_communities")
  posts: [Post!] @relation(name: "community_posts")
}

type Post {
  title: String!
  message: String!
  creator: User! @relation(name: "user_posts")
  community: Community! @relation(name: "community_posts")
  upVotes: Int!
  downVotes: Int!
  votes: [PostVote!] @relation(name: "post_votes")
}

type PostVote {
  post: Post! @relation(name: "post_votes")
  user: User! @relation(name: "user_post_votes")
  type: PostVoteType!
}

enum PostVoteType {
  UpVote
  DownVote
}