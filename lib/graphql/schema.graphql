directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
type Community {
  name: String!
  posts(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): PostPage!
  # The document's ID.
  _id: ID!
  creator: User!
  purpose: String
  # The document's timestamp.
  _ts: Long!
}

# Allow manipulating the relationship between the types 'Community' and 'User' using the field 'Community.creator'.
input CommunityCreatorRelation {
  # Create a document of type 'User' and associate it with the current document.
  create: UserInput
  # Connect a document of type 'User' with the current document using its ID.
  connect: ID
}

# 'Community' input values
input CommunityInput {
  name: String!
  purpose: String
  creator: CommunityCreatorRelation
  posts: CommunityPostsRelation
}

# The pagination object for elements of type 'Community'.
type CommunityPage {
  # The elements of type 'Community' in this page.
  data: [Community]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

# Allow manipulating the relationship between the types 'Community' and 'Post'.
input CommunityPostsRelation {
  # Create one or more documents of type 'Post' and associate them with the current document.
  create: [PostInput]
  # Connect one or more documents of type 'Post' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Post' from the current document using their IDs.
  disconnect: [ID]
}

input CreatePostInput {
  title: String!
  message: String!
  communityId: String!
}

input CreateUserInput {
  username: String!
  password: String!
}

scalar Date

input LoginUserInput {
  username: String!
  password: String!
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  # Update an existing document in the collection of 'User'
  updateUser(
    # The 'User' document's ID
    id: ID!
    # 'User' input values
    data: UserInput!
  ): User
  createUser(input: CreateUserInput!): String!
  # Update an existing document in the collection of 'Community'
  updateCommunity(
    # The 'Community' document's ID
    id: ID!
    # 'Community' input values
    data: CommunityInput!
  ): Community
  # Update an existing document in the collection of 'Post'
  updatePost(
    # The 'Post' document's ID
    id: ID!
    # 'Post' input values
    data: PostInput!
  ): Post
  loginUser(input: LoginUserInput!): String!
  # Delete an existing document in the collection of 'Community'
  deleteCommunity(
    # The 'Community' document's ID
    id: ID!
  ): Community
  # Delete an existing document in the collection of 'User'
  deleteUser(
    # The 'User' document's ID
    id: ID!
  ): User
  # Delete an existing document in the collection of 'Post'
  deletePost(
    # The 'Post' document's ID
    id: ID!
  ): Post
  createPost(input: CreatePostInput!): Post!
  # Create a new document in the collection of 'Community'
  createCommunity(
    # 'Community' input values
    data: CommunityInput!
  ): Community!
}

type Post {
  community: Community!
  # The document's ID.
  _id: ID!
  creator: User!
  message: String!
  title: String!
  # The document's timestamp.
  _ts: Long!
}

# Allow manipulating the relationship between the types 'Post' and 'Community' using the field 'Post.community'.
input PostCommunityRelation {
  # Create a document of type 'Community' and associate it with the current document.
  create: CommunityInput
  # Connect a document of type 'Community' with the current document using its ID.
  connect: ID
}

# Allow manipulating the relationship between the types 'Post' and 'User' using the field 'Post.creator'.
input PostCreatorRelation {
  # Create a document of type 'User' and associate it with the current document.
  create: UserInput
  # Connect a document of type 'User' with the current document using its ID.
  connect: ID
}

# 'Post' input values
input PostInput {
  title: String!
  message: String!
  creator: PostCreatorRelation
  community: PostCommunityRelation
}

# The pagination object for elements of type 'Post'.
type PostPage {
  # The elements of type 'Post' in this page.
  data: [Post]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

type Query {
  getPostsByCommunityId(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
    id: ID!
  ): QueryGetPostsByCommunityIdPage!
  # Find a document from the collection of 'Community' by its id.
  findCommunityByID(
    # The 'Community' document's ID
    id: ID!
  ): Community
  # Find a document from the collection of 'Post' by its id.
  findPostByID(
    # The 'Post' document's ID
    id: ID!
  ): Post
  # Find a document from the collection of 'User' by its id.
  findUserByID(
    # The 'User' document's ID
    id: ID!
  ): User
  throwsError: Community!
  communities(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommunityPage!
}

# The pagination object for elements of type 'Post'.
type QueryGetPostsByCommunityIdPage {
  # The elements of type 'Post' in this page.
  data: [Post]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

scalar Time

type User {
  posts(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): PostPage!
  username: String!
  # The document's ID.
  _id: ID!
  communities(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommunityPage!
  # The document's timestamp.
  _ts: Long!
}

# Allow manipulating the relationship between the types 'User' and 'Community'.
input UserCommunitiesRelation {
  # Create one or more documents of type 'Community' and associate them with the current document.
  create: [CommunityInput]
  # Connect one or more documents of type 'Community' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Community' from the current document using their IDs.
  disconnect: [ID]
}

# 'User' input values
input UserInput {
  username: String!
  communities: UserCommunitiesRelation
  posts: UserPostsRelation
}

# Allow manipulating the relationship between the types 'User' and 'Post'.
input UserPostsRelation {
  # Create one or more documents of type 'Post' and associate them with the current document.
  create: [PostInput]
  # Connect one or more documents of type 'Post' with the current document using their IDs.
  connect: [ID]
  # Disconnect the given documents of type 'Post' from the current document using their IDs.
  disconnect: [ID]
}

