directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(
  name: String
  paginated: Boolean! = false
) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
type Community {
  name: String!
  # The document's ID.
  _id: ID!
  icon: String
  purpose: String
  # The document's timestamp.
  _ts: Long!
}

# 'Community' input values
input CommunityInput {
  name: String!
  purpose: String
  icon: String
}

# The pagination object for elements of type 'Community'.
type CommunityPage {
  # The elements of type 'Community' in this page.
  data: [Community]!
  # A cursor for elements coming after the current page.
  after: String
  # A cursor for elements coming before the current page.
  before: String
}

input CreateUserInput {
  username: String!
  password: String!
}

scalar Date

input LoginUserInput {
  username: String!
  password: String!
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  # Update an existing document in the collection of 'User'
  updateUser(
    # The 'User' document's ID
    id: ID!
    # 'User' input values
    data: UserInput!
  ): User
  createUser(data: CreateUserInput!): String!
  # Update an existing document in the collection of 'Community'
  updateCommunity(
    # The 'Community' document's ID
    id: ID!
    # 'Community' input values
    data: CommunityInput!
  ): Community
  # Delete an existing document in the collection of 'Community'
  deleteCommunity(
    # The 'Community' document's ID
    id: ID!
  ): Community
  # Delete an existing document in the collection of 'User'
  deleteUser(
    # The 'User' document's ID
    id: ID!
  ): User
  login(data: LoginUserInput!): String!
  # Create a new document in the collection of 'Community'
  createCommunity(
    # 'Community' input values
    data: CommunityInput!
  ): Community!
}

type Query {
  # Find a document from the collection of 'Community' by its id.
  findCommunityByID(
    # The 'Community' document's ID
    id: ID!
  ): Community
  # Find a document from the collection of 'User' by its id.
  findUserByID(
    # The 'User' document's ID
    id: ID!
  ): User
  communities(
    # The number of items to return per page.
    _size: Int
    # The pagination cursor.
    _cursor: String
  ): CommunityPage!
  viewer: User!
}

scalar Time

type User {
  # The document's ID.
  _id: ID!
  # The document's timestamp.
  _ts: Long!
  username: String!
}

# 'User' input values
input UserInput {
  username: String!
}

